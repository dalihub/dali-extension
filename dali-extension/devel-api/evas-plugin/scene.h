#ifndef DALI_EXTENSION_SCENE_H
#define DALI_EXTENSION_SCENE_H

/*
 * Copyright (c) 2020 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/**
 * @addtogroup CAPI_DALI_EXTENSION_FRAMEWORK_MODULE
 * @{
 */

// EXTERNAL INCLUDES
#include <Evas.h>

#include <dali/public-api/actors/actor.h>
#include <dali/public-api/math/uint-16-pair.h>
#include <dali/public-api/signals/dali-signal.h>

// INTERNAL INCLUDES
#include <dali-extension/devel-api/evas-plugin/evas-plugin.h>

namespace Dali
{

class Layer;

namespace Extension
{

namespace Internal
{
class Scene;
}

/**
 * @brief Like EvasPlugin is an Application class used by EFL applications,
 * the Scene corresponds to the Window class.
 *
 * |  DALi         | EFL with DALi     |
 * |---------------|-------------------|
 * |  Application  | EvasPlugin        |
 * |  Window       | Scene             |
 *
 * When the EvasPlugin is created, a Scene is generated by default, it is called "default scene".
 * You can get it by calling EvasPlugin::GetDefaultScene().
 *
 * Also, the EvasPlugin can have multiple scenes.
 * You can create a new Scene by calling Scene::New(...);
 */
class DALI_IMPORT_API Scene : public Dali::BaseHandle
{
public:

  typedef Uint16Pair SceneSize;

  typedef Signal<void (Scene, bool)> VisibilityChangedSignalType;

  typedef Signal<void (Scene, bool)> FocusChangedSignalType;

  typedef Signal<void (Scene, uint16_t, uint16_t)> ResizedSignalType;

public:

  /**
   * @brief Creates an initialized handle to a new Scene
   * @note You should hold the returned handle. If you missed the handle, the scene will be released
   *
   * @param[in] evasPlugin The EvasPlugin handle
   * @param[in] parentEvasObject Parent Evas object of the new scene
   * @param[in] width The initial width of the scene
   * @param[in] height The initial height of the scene
   * @param[in] isTranslucent Whether the Evas object is translucent or not
   */
  static Scene New( EvasPlugin evasPlugin, Evas_Object* parentEvasObject, uint16_t width, uint16_t height, bool isTranslucent );

  /**
   * @brief Constructs an empty handle
   */
  Scene();

  /**
   * @brief Copy constructor
   */
  Scene( const Scene& scene );

  /**
   * @brief Assignment operator
   */
  Scene& operator=( const Scene& scene );

  /**
   * @brief Destructor
   */
  ~Scene();

public:
  /**
   * @brief Adds a child Actor to the Scene.
   *
   * The child will be referenced.
   *
   * @param[in] actor The child
   * @pre The actor has been initialized.
   * @pre The actor does not have a parent.
   */
  void Add( Actor actor );

  /**
   * @brief Removes a child Actor from the Scene.
   *
   * The child will be unreferenced.
   *
   * @param[in] actor The child
   * @pre The actor has been added to the Scene.
   */
  void Remove( Actor actor );

  /**
   * @brief Sets the background color of the Scene.
   *
   * @param[in] color The new background color
   */
  void SetBackgroundColor( const Vector4& color );

  /**
   * @brief Gets the background color of the Scene.
   *
   * @return The background color
   */
  Vector4 GetBackgroundColor() const;

  /**
   * @brief Returns the root Layer of the Scene.
   *
   * @return The root layer
   */
  Layer GetRootLayer() const;

  /**
   * @brief Queries the number of on-scene layers.
   *
   * Note that a default layer is always provided (count >= 1).
   *
   * @return The number of layers
   */
  uint32_t GetLayerCount() const;

  /**
   * @brief Retrieves the layer at a specified depth in the Scene.
   *
   * @SINCE_1_4.19
   * @param[in] depth The depth
   * @return The layer found at the given depth
   * @pre Depth is less than layer count; see GetLayerCount().
   */
  Layer GetLayer( uint32_t depth ) const;

  /**
   * @brief Returns the size of the Scene in pixels as a Vector.
   *
   * The x component will be the width of the Scene in pixels.
   * The y component will be the height of the Scene in pixels.
   *
   * @return The size of the Scene as a Vector
   */
  SceneSize GetSize() const;

  /**
   * @brief This returns the Evas_Object* for accessibility which is created internally
   *
   * Applications should append this access object to custom focus chain for accessibility
   *
   * e.g., elm_object_focus_custom_chain_append(layout, dali_access_object, NULL);
   *
   * @return Evas_Object* Elm access object which Dali image Evas object is registered
   */
  Evas_Object* GetAccessEvasObject();

  /**
   * @brief This returns the Evas_Object* which is created internally
   *
   * @return Evas_Object* Evas object which is rendered by Dali
   */
  Evas_Object* GetDaliEvasObject();

public:  // Signals

  /**
   * @brief Signal to notify the client when the Evas object's visibility is changed
   *
   * @return The signal
   */
  VisibilityChangedSignalType& VisibilityChangedSignal();

  /**
   * @brief Signal to notify the client when the Evas object is resized
   *
   * @return The signal
   */
  ResizedSignalType& ResizedSignal();

  /**
   * @brief Signal to notify the client when the Evas object gets/loses the keyboard focus
   *
   * @return The signal
   */
  FocusChangedSignalType& FocusChangedSignal();

public: // Not intended for application developers

  /**
   * @brief Internal constructor
   */
  explicit DALI_INTERNAL Scene( Internal::Scene* scene );

};

/**
 * @}
 */

}  // namespace Extension

}  // namespace Dali

#endif // DALI_EXTENSION_SCENE_H
